#include <Wire.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BMP085_U.h>
#include <SPI.h>
#include <SD.h>

File dataLog;
Adafruit_BMP085_Unified bmp = Adafruit_BMP085_Unified(10085);

const int MPU_ADDR = 0x68;                                  // I2C address of the MPU-6050. If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z;  // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z;                             // variables for gyro raw data
int16_t temperature;                                        // variables for temperature data

void setup() {
  Serial.begin(9600);
  Wire.begin();

  initMPU6050();
  initSD();      // Validate microSD card connection
  initBMP180();  // Validate BMP sensor connection
 
}

void loop() {
  delay(1000);

  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);                         // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false);              // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7 * 2, true);  // request a total of 7*2=14 registers

  fetchMPU6050();          // Update MPU6050 data
  displayTelemetryData();  // Display all data
  logTelemtryData();       // Write all data to SD card
}

void initMPU6050() {
  Wire.beginTransmission(MPU_ADDR);  // Begins a transmission to the I2C slave (GY-521 board)
  Wire.write(0x6B);                  // PWR_MGMT_1 register
  Wire.write(0);                     // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
}

void initBMP180(void) {
  /* Initialise the sensor */
  if (!bmp.begin()) {
    /* There was a problem detecting the BMP085 ... check your connections */
    Serial.print("Ooops, no BMP180 detected ... Check your wiring or I2C ADDR!");
    while (1)
      ;
  }

  sensor_t sensor;
  bmp.getSensor(&sensor);
  Serial.println("------------------------------------");
  Serial.print("Sensor:       ");
  Serial.println(sensor.name);
  Serial.print("Driver Ver:   ");
  Serial.println(sensor.version);
  Serial.print("Unique ID:    ");
  Serial.println(sensor.sensor_id);
  Serial.print("Max Value:    ");
  Serial.print(sensor.max_value);
  Serial.println(" hPa");
  Serial.print("Min Value:    ");
  Serial.print(sensor.min_value);
  Serial.println(" hPa");
  Serial.print("Resolution:   ");
  Serial.print(sensor.resolution);
  Serial.println(" hPa");
  Serial.println("------------------------------------");
  Serial.println("");
}

void initSD(void) {
  Serial.println("Initializing SD card...");

  if (!SD.begin(4)) {
    Serial.println("initialization failed!");
    while (1)
      ;
  }
  dataLog = SD.open("log.csv", FILE_WRITE);

  if (dataLog) {
    dataLog.println("Time,Pressure,Temperature,Altitude,Accelerometer X,Accelerometer Y,Accelerometer Z,Temperature,Gyro X,Gyro Y,Gyro Z");
    dataLog.close();
    delay(100);
  }

  Serial.println("initialization done.");
}

void fetchMPU6050(void) {
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read() << 8 | Wire.read();  // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read() << 8 | Wire.read();  // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read() << 8 | Wire.read();  // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  temperature = Wire.read() << 8 | Wire.read();      // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x = Wire.read() << 8 | Wire.read();           // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y = Wire.read() << 8 | Wire.read();           // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  gyro_z = Wire.read() << 8 | Wire.read();           // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
}

void logTelemtryData() {

  dataLog = SD.open("log.csv", FILE_WRITE);

  if (dataLog) {

    // GY68
    float temperature;
    float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
    sensors_event_t event;
    bmp.getTemperature(&temperature);
    bmp.getEvent(&event);


    dataLog.print(millis() / 1000.0, 3);
    dataLog.print(" s,");
    dataLog.print(event.pressure);
    dataLog.print(" hPa,");
    dataLog.print(temperature);
    dataLog.print(" C,");
    dataLog.print(bmp.pressureToAltitude(seaLevelPressure, event.pressure));
    dataLog.print(" m,");

    // GY-521 MPU6050
    dataLog.print(convert_int16_to_str(accelerometer_x));
    dataLog.print(",");
    dataLog.print(convert_int16_to_str(accelerometer_y));
    dataLog.print(",");
    dataLog.print(convert_int16_to_str(accelerometer_z));
    dataLog.print(",");
    dataLog.print(temperature / 340.00 + 36.53);
    dataLog.print(",");
    dataLog.print(convert_int16_to_str(gyro_x));
    dataLog.print(",");
    dataLog.print(convert_int16_to_str(gyro_y));
    dataLog.print(",");
    dataLog.println(convert_int16_to_str(gyro_z));

    dataLog.close();
  } else {
    // if the file didn't open, print an error:
    Serial.print("error opening ");
    Serial.println("log.csv");
  }
}

void displayTelemetryData(void) {

  /* Elapsed time */
  Serial.print("Time        | ");
  Serial.print(millis() / 1000.0, 3);
  Serial.println(" s");

  /* BMP180 */
  sensors_event_t event;
  bmp.getEvent(&event);
  if (event.pressure) {
    /* Display atmospheric pressue in hPa */
    Serial.print("Pressure    | ");
    Serial.print(event.pressure);
    Serial.println(" hPa");
    float temperature;
    bmp.getTemperature(&temperature);
    Serial.print("Temperature | ");
    Serial.print(temperature);
    Serial.println(" C");
    float seaLevelPressure = SENSORS_PRESSURE_SEALEVELHPA;
    Serial.print("Altitude    | ");
    Serial.print(bmp.pressureToAltitude(seaLevelPressure,
                                        event.pressure));
    Serial.println(" m");
  } else {
    Serial.println("Sensor error");
  }

  /* MPU6050 */
  Serial.print("Gyro        | ");
  Serial.print("aX = ");
  Serial.print(convert_int16_to_str(accelerometer_x));
  Serial.print(" | aY = ");
  Serial.print(convert_int16_to_str(accelerometer_y));
  Serial.print(" | aZ = ");
  Serial.print(convert_int16_to_str(accelerometer_z));
  Serial.print(" | tmp = ");
  Serial.print(temperature / 340.00 + 36.53);
  Serial.print(" | gX = ");
  Serial.print(convert_int16_to_str(gyro_x));
  Serial.print(" | gY = ");
  Serial.print(convert_int16_to_str(gyro_y));
  Serial.print(" | gZ = ");
  Serial.print(convert_int16_to_str(gyro_z));
  Serial.println("\n");
}

char tmp_str[7];  // temporary variable used in convert function

char* convert_int16_to_str(int16_t i) {  // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}
